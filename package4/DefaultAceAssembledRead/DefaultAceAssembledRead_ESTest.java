/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 05:14:05 GMT 2024
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.ace.AceAssembledReadBuilder;
import org.jcvi.jillion.assembly.consed.ace.DefaultAceAssembledRead;
import org.jcvi.jillion.assembly.consed.ace.PhdInfo;
import org.jcvi.jillion.core.Direction;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultAceAssembledRead_ESTest extends DefaultAceAssembledRead_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      Direction direction0 = Direction.REVERSE;
      Range range0 = Range.of((long) 0);
      MockDate mockDate0 = new MockDate((-1893), 0, 0, 594, (-1893));
      PhdInfo phdInfo0 = new PhdInfo("/4`|kM", "/4`|kM", mockDate0);
      // Undeclared exception!
      try { 
        DefaultAceAssembledRead.createBuilder(nucleotideSequence0, ")r", nucleotideSequence1, 0, direction0, range0, phdInfo0, (-1893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clear range extends beyond ungapped full length
         //
         verifyException("org.jcvi.jillion.internal.assembly.DefaultAssembledRead$Builder", e);
      }
  }
}
