/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 01:32:27 GMT 2024
 */

package com.liferay.portal.model.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.model.Account;
import com.liferay.portal.model.AccountWrapper;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.Organization;
import com.liferay.portal.model.OrganizationSoap;
import com.liferay.portal.model.OrganizationWrapper;
import com.liferay.portal.model.PasswordPolicy;
import com.liferay.portal.model.PasswordPolicyWrapper;
import com.liferay.portal.model.Repository;
import com.liferay.portal.model.RepositoryWrapper;
import com.liferay.portal.model.impl.OrganizationImpl;
import com.liferay.portal.model.impl.OrganizationModelImpl;
import com.liferay.portal.service.ServiceContext;
import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrganizationModelImpl_ESTest extends OrganizationModelImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OrganizationModelImpl organizationModelImpl0 = new OrganizationModelImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      Date date0 = serviceContext0.getCreateDate((Date) null);
      PasswordPolicy passwordPolicy0 = mock(PasswordPolicy.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(passwordPolicy0).getAllowDictionaryWords();
      doReturn(true).when(passwordPolicy0).getChangeRequired();
      doReturn(true).when(passwordPolicy0).getChangeable();
      doReturn(false).when(passwordPolicy0).getCheckSyntax();
      doReturn((-2154L)).when(passwordPolicy0).getCompanyId();
      doReturn(date0).when(passwordPolicy0).getCreateDate();
      doReturn(false).when(passwordPolicy0).getDefaultPolicy();
      doReturn("Index ").when(passwordPolicy0).getDescription();
      doReturn(true).when(passwordPolicy0).getExpireable();
      doReturn((-2698)).when(passwordPolicy0).getGraceLimit();
      doReturn(true).when(passwordPolicy0).getHistory();
      doReturn((-1929)).when(passwordPolicy0).getHistoryCount();
      doReturn(true).when(passwordPolicy0).getLockout();
      doReturn(4L).when(passwordPolicy0).getLockoutDuration();
      doReturn((-4630L)).when(passwordPolicy0).getMaxAge();
      doReturn(2).when(passwordPolicy0).getMaxFailure();
      doReturn((-2154L)).when(passwordPolicy0).getMinAge();
      doReturn(150).when(passwordPolicy0).getMinAlphanumeric();
      doReturn((-3763)).when(passwordPolicy0).getMinLength();
      doReturn((-1006)).when(passwordPolicy0).getMinLowerCase();
      doReturn((-1929)).when(passwordPolicy0).getMinNumbers();
      doReturn((-1929)).when(passwordPolicy0).getMinSymbols();
      doReturn((-751)).when(passwordPolicy0).getMinUpperCase();
      doReturn((Date) null).when(passwordPolicy0).getModifiedDate();
      doReturn("Index ").when(passwordPolicy0).getName();
      doReturn((-375L)).when(passwordPolicy0).getPasswordPolicyId();
      doReturn(true).when(passwordPolicy0).getRequireUnlock();
      doReturn(0L).when(passwordPolicy0).getResetFailureCount();
      doReturn((-1L)).when(passwordPolicy0).getResetTicketMaxAge();
      doReturn((long)2).when(passwordPolicy0).getUserId();
      doReturn("liferayTransactionManager").when(passwordPolicy0).getUserName();
      doReturn(0L).when(passwordPolicy0).getWarningTime();
      PasswordPolicyWrapper passwordPolicyWrapper0 = new PasswordPolicyWrapper(passwordPolicy0);
      Map<String, Object> map0 = passwordPolicyWrapper0.getModelAttributes();
      organizationModelImpl0.setModelAttributes(map0);
      organizationModelImpl0.getName();
      assertEquals((-2154L), organizationModelImpl0.getCompanyId());
  }
}
